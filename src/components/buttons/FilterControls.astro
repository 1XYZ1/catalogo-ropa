---
import { products } from '../../data/products';

// Obtener todos los tipos únicos de productos
const categories = Array.from(new Set(products.map(product => product.type))).sort();

const { baseRoute } = Astro.props;
const currentUrl = Astro.url.pathname;

// Determinar si la URL contiene un género específico
const isGenderRoute = currentUrl.includes('/hombre') || currentUrl.includes('/mujer');
const currentGender = currentUrl.includes('/hombre') ? 'hombre' : currentUrl.includes('/mujer') ? 'mujer' : '';

// Función para verificar si una combinación de género y categoría existe en los productos
const combinationExists = (gender: string | undefined, category: string | undefined) => {
  return products.some(product => product.gender === gender && product.type === category);
};

// Función para verificar si un género existe en los productos
const genderExists = (gender: string | undefined) => {
  return products.some(product => product.gender === gender);
};

// Determinar si la URL contiene una categoría específica
const currentCategory = categories.find(category => currentUrl.includes(`/${category}`)) || '';
const isTodosActive = !isGenderRoute && (currentUrl === '/' || currentCategory);
---

<div class="flex justify-center space-x-4 mb-8">
  <a href="/" class={`px-4 py-2 rounded font-semibold ${isTodosActive ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-800 hover:bg-blue-100'}`}>Todos</a>
  <a href="/categoria/hombre" class={`px-4 py-2 rounded font-semibold ${currentGender === 'hombre' ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-800 hover:bg-blue-100'} ${!genderExists('hombre') ? 'opacity-50 cursor-not-allowed' : ''}`} aria-disabled={!genderExists('hombre')}>Hombre</a>
  <a href="/categoria/mujer" class={`px-4 py-2 rounded font-semibold ${currentGender === 'mujer' ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-800 hover:bg-blue-100'} ${!genderExists('mujer') ? 'opacity-50 cursor-not-allowed' : ''}`} aria-disabled={!genderExists('mujer')}>Mujer</a>
</div>

<div class="flex justify-center space-x-4 mb-8">
  {categories.map((category) => {
    const isActive = currentUrl.endsWith(`/${category}`) || (!isGenderRoute && currentCategory === category);
    const isDisabled = !combinationExists(currentGender, category) && isGenderRoute;
    const href = isDisabled ? '#' : isGenderRoute ? `/categoria/${currentGender}/${category}` : `/${baseRoute}/${category}`;
    return isDisabled ? (
      <button class={`px-4 py-2 rounded font-semibold bg-gray-200 text-gray-800 opacity-50 cursor-not-allowed`} disabled>
        {(category ?? '').charAt(0).toUpperCase() + (category ?? '').slice(1)}
      </button>
    ) : (
      <a href={href} class={`px-4 py-2 rounded font-semibold ${isActive ? 'bg-blue-600 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-800 hover:bg-blue-100'}`}>
        {(category ?? '').charAt(0).toUpperCase() + (category ?? '').slice(1)}
      </a>
    );
  })}
</div>