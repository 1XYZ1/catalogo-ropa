---
interface SizeType {
  size: string;
  stock: number;
}

interface Props {
  name: string;
  slug: string;
  images: string[];
  price?: number;
  type: string;
  discount: number;
  sizes?: SizeType[];
  color?: string;
  createdAt?: Date; // Añadido para funcionalidad de productos nuevos
}

const {
  name,
  slug,
  images,
  price = 0,
  type,
  discount = 0,
  sizes = [],
  color = '',
  createdAt = new Date(), // Valor por defecto
} = Astro.props;

const image = images[0];

// Función de formateo de precio mejorada
const formatPrice = (price: number) => {
  return price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
};

const formattedPrice = formatPrice(price);
const discountedPrice = price - (price * (discount / 100));
const formattedDiscountedPrice = formatPrice(discountedPrice);

const capitalizeFirstLetter = (str: string) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};


---

<article class="group bg-white rounded-lg overflow-hidden border border-gray-100 shadow-sm hover:shadow-md transition-all duration-300">
  {/* Contenedor de imagen con aspect ratio fijo */}
  <div class="relative aspect-[1/1.2]">
    <a href={`/producto/${slug}`} class="block h-full">
      <img
        loading="lazy"
        decoding="async"
        width="400"
        height="400"
        src={image}
        alt={name}
        class="w-full h-full object-contain transition-transform duration-300 group-hover:scale-105"
      />
    </a>

    {/* Badge de descuento */}
    {discount > 0 && (
      <div class="absolute top-3 right-3">
        <span class="inline-block px-2 py-1 bg-red-500 text-white text-sm font-medium rounded-md">
          {discount}% OFF
        </span>
      </div>
    )}
  </div>

  {/* Contenedor de información */}
  <div class="p-4 flex flex-col h-full">
    <div class="flex-1 space-y-2 text-center"> {/* Añadido text-center */}
      <h3 class="font-medium text-gray-800 text-lg leading-tight line-clamp-2 group-hover:text-black" title={name}>
        {name}
      </h3>
      {color && (
        <p class="text-sm text-gray-500">
          Color: <span class="text-gray-700">{capitalizeFirstLetter(color)}</span>
        </p>
      )}
    </div>

    {/* Precios */}
    <div class="mt-3 flex items-center justify-center gap-2">
      {discount > 0 ? (
        <div class="flex items-center gap-2">
          <span class="text-base text-gray-400 line-through">
            ${formatPrice(price)}
          </span>
          <span class="text-xl font-bold text-red-500">
            ${formattedDiscountedPrice}
          </span>
        </div>
      ) : (
        <span class="text-xl font-bold text-gray-900">
          ${formattedPrice}
        </span>
      )}
    </div>

    {/* Tallas */}
    {sizes.length > 0 && (
      <div class="mt-3">
        <p class="text-xs text-gray-500 text-center mb-2">Tallas disponibles:</p>
        <div class="flex flex-wrap justify-center gap-1.5">
          {sizes.map(({ size, stock }) => (
            <span
              class={`inline-flex items-center justify-center w-7 h-7 rounded-full text-xs font-medium transition-colors
                ${stock > 0
                  ? 'bg-gray-100 text-gray-900 hover:bg-gray-200'
                  : 'bg-gray-50 text-gray-400'}`}
            >
              {size}
            </span>
          ))}
        </div>
      </div>
    )}

    {/* Botón de acción */}
    <a
      href={`/producto/${slug}`}
      class="mt-4 w-full text-center py-2.5 px-4 bg-black text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors duration-200"
    >
      Ver Detalles
    </a>
  </div>
</article>